name: C/C++ CI

on:
  push:
    paths-ignore:
      - '**/*.md'  # Ignore pushes that only change Markdown files

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmpg123-dev libao-dev
    
    - name: Run make command
      run: |
        make
      
    - name: Create SSL data
      run: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out cert.pem -subj "/C=US/ST=CO/L=Denver/O=RegisUniversity/OU=CS469/CN=regis.edu/emailAddress=hsherwin@regis.edu"
      
    - name: Build Docker image for server
      run: |
        docker build -t server .
        docker images
      
    - name: Run a server container
      run: docker run -d --name test-server -p 8080:8080 server
      
    - name: Check Docker container status
      run: |
        sleep 10  # Wait for the server to stabilize
        STATUS=$(docker inspect --format='{{.State.Status}}' test-server)
        if [ "$STATUS" != "running" ]; then
          echo "Server failed to start, status: $STATUS"
          exit 1
        else
          echo "Server is running, status: $STATUS"
        fi
    
    - name: Stop and remove Docker container
      run: |
        docker stop test-server
        docker rm test-server
        
    - name: Install Kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
    - name: Start Minikube
      run: |
        minikube start --driver=docker --nodes=3
        
    - name: Check Minikube and Cluster status
      run: |
        sleep 10  # Wait for the nodes to stabilize
        minikube status
        kubectl get pods -A
        
    - name: Log in to GitHub Container Registry (GHCR)
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

    - name: Tag and push Docker image to GHCR
      run: |
        docker tag server ghcr.io/hasherwi/server:latest
        docker push ghcr.io/hasherwi/server:latest
        docker images
        
    - name: Create secret for GHCR
      run: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.repository_owner }} \
          --docker-password=${{ secrets.GHCR_TOKEN }} \
          --docker-email=harrison.sherwin@gmail.com
    
    - name: Apply Kubernetes manifest
      run: |
        kubectl apply -f k8s-manifest.yml
        
    - name: Check pod status and ensure all pods are running
      run: |
        echo "Checking if all pods are in Running state..."
        sleep 10  # Wait for the pods to stabilize
        kubectl get pods -A
        STATUS=$(kubectl get pods -n mp3-server --no-headers -o custom-columns=":status.phase")
        if echo "$STATUS" | grep -v "Running"; then
          echo "Some pods are not in Running state, failing the workflow."
          echo "Pod statuses: $STATUS"
          exit 1
        else
          echo "All pods are in Running state."
        fi

    - name: Check service status
      run: |
        echo "Checking service status..."
        kubectl get svc -n mp3-server
        minikube service server-service -n mp3-server --url
        
    - name: Check HorizontalPodAutoscaler (HPA) status
      run: |
        echo "Checking HPA status..."
        kubectl get hpa server-hpa -n mp3-server