name: Docker Image and C code CI
  
on:
  push:
    paths:
      - '.github/workflows/docker-image.yml'
      - 'sample-mp3s/**'
      - '**/*.c'
      - '**/*.h'
      - 'Dockerfile'
      - 'Makefile'

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up Git LFS
      run: |
        echo "Setting up Git Large File Storage (LFS)..."
        git lfs install
        git lfs track "*.tar"
        git add .gitattributes
        git commit -m "Update .gitattributes for LFS" || echo "No changes to commit"

    - name: Prune old and unreferenced LFS files
      run: |
        echo "Pruning old and unreferenced LFS files..."
        git lfs prune

    - name: Pull hadolint
      run: |
        echo "Pulling hadolint..."
        docker pull ghcr.io/hadolint/hadolint
        
    - name: Run hadolint
      run: |
        echo "Running hadolint..."
        docker run --rm -i ghcr.io/hadolint/hadolint < Dockerfile
        
    - name: Install source code dependencies
      run: |
        echo "Installing dependencies..."
        sudo apt-get update
        sudo apt-get install -y libmpg123-dev libao-dev
    # libmpg123-dev and libao-dev are for MP3 file interactions.
    
    - name: Run make command
      run: |
        echo "Making C code..."
        make
      
    - name: Create SSL data
      run: |
        echo "Generating SSL data..."
        openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out cert.pem -subj "/C=US/ST=CO/L=Denver/O=RegisUniversity/OU=CS469/CN=regis.edu/emailAddress=${{ secrets.REGIS_EMAIL }}"
    
    - name: Start Server in Background
      run: |
        echo "Starting Server..."
        ./server &
        SERVER_PID=$!
        echo "Server started with PID $SERVER_PID"
        sleep 5
    
    - name: Run Client  with Inputs Piped
      run: |
        echo "Sending inputs to the client..."
        echo -e "1\n3\nnightfall-future-bass-music-228100.mp3\n4\n1\n0\n" | ./client localhost:8080
    # Need to test stopping playback and searching.
    
    - name: Stop Server
      if: always()
      run: |
        echo "Stopping Server..."
        kill $SERVER_PID
        echo "Server stopped."
    
    - name: Build the Docker image
      run: |
        echo "Building Docker image..."
        docker build . --file Dockerfile --build-arg PORT=8080 --tag ${{ secrets.DOCKER_USERNAME }}/cs469-server:latest
        
    - name: Run a server container
      run: |
        echo "Running a copy of server container..."
        docker run -d --name test-server -p 8080:8080 -e PORT=8080 ${{ secrets.DOCKER_USERNAME }}/cs469-server:latest
      
    - name: Check Docker container status
      run: |
        sleep 10  # Wait for the server to stabilize
        STATUS=$(docker inspect --format='{{.State.Status}}' test-server)
        if [ "$STATUS" != "running" ]; then
          echo "Server failed to start, status: $STATUS"
          exit 1
        else
          echo "Server is running, status: $STATUS"
        fi
    
    - name: Log in to DockerHub
      run: |
        echo "Accessing DockerHub..."
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Push the Docker image
      run: |
        echo "Pushing image to DockerHub..."
        docker push hsherwin/cs469-server:latest
    
    - name: Generate the .tar file
      run: |
        echo "Saving image as a .tar file..."
        docker save -o server-image.tar hsherwin/cs469-server:latest
    
    - name: Check for .tar file changes compared to repo
      id: git_status_1
      run: |
        echo "Checking for .tar file changes..."
        git add server-image.tar
        # Check if there are any changes
        if git diff --cached --quiet; then
          echo "No changes detected."
          echo "changes_detected=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes_detected=true" >> $GITHUB_ENV
        fi

    - name: Commit and push .tar file
      if: env.changes_detected == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Pushing .tar file changes..."
        git config --global user.email "harrison.sherwin@gmail.com"
        git config --global user.name "github-actions[bot]"
        # Commit and push the changes if any
        git commit -m "Update generated .tar file with container image"
        git push origin main
    
    - name: Move executables to folder.
      run: |
        echo "Moving executables to correct folder..."
        cp client server executables/
    
    - name: Check for client executable file changes compared to repo
      id: git_status_2
      run: |
        echo "Checking for client executable file changes..."
        git add executables/client
        # Check if there are any changes
        if git diff --cached --quiet; then
          echo "No changes detected."
          echo "changes_detected=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes_detected=true" >> $GITHUB_ENV
        fi

    - name: Commit and push the client executable file
      if: env.changes_detected == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Pushing client executable file changes..."
        git config --global user.email "harrison.sherwin@gmail.com"
        git config --global user.name "github-actions[bot]"
        # Commit and push the changes if any
        git commit -m "Update generated client executable"
        git push origin main
        
    - name: Check for server executable file changes compared to repo
      id: git_status_3
      run: |
        echo "Checking for server executable file changes..."
        git add executables/server
        # Check if there are any changes
        if git diff --cached --quiet; then
          echo "No changes detected."
          echo "changes_detected=false" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "changes_detected=true" >> $GITHUB_ENV
        fi

    - name: Commit and push the server executable file
      if: env.changes_detected == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Pushing server executable file changes..."
        git config --global user.email "harrison.sherwin@gmail.com"
        git config --global user.name "github-actions[bot]"
        # Commit and push the changes if any
        git commit -m "Update generated client executable"
        git push origin main
