name: Kubernetes Cluster Main Workflow

on:
  push:
    paths:
      - '.github/workflows/main.yml'
  workflow_run:
    workflows: [Docker Image CI, Kubernetes Manifest Generation from Helm]
    types:
      - completed
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Install Kubectl
      run: |
        echo "Installing Kubectl..."
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install Helm
      run: |
        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
    - name: Lint Helm Chart
      run: |
        echo "Linting with Helm..."
        helm lint ./server-helm-chart

    - name: Install Minikube
      run: |
        echo "Installing Minikube..."
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
    - name: Start Minikube Cluster 1
      run: |
        echo "Starting Minikube cluster..."
        minikube start --driver=docker
        
    - name: Tell Minikube to use the Docker environment (1)
      run: |
        eval $(minikube -p minikube docker-env)
    
    - name: Check Minikube status (1)
      run: |
        minikube status

    - name: Apply manifest without Helm
      run: |
        kubectl apply -f k8s-manifest-no-helm.yaml
        
    - name: Check pod status and gather debug information for all pods (No Helm)
      run: |
        sleep 30  # Wait for the pods to stabilize
        echo "Checking pod statuses..."
        echo "Pod statuses:"
        kubectl get pods -n mp3-server
        for pod in $(kubectl get pods -n mp3-server --no-headers -o custom-columns=":metadata.name"); do
          echo "Describing pod: $pod"
          kubectl describe pod $pod -n mp3-server
          echo "Getting logs for pod: $pod"
          kubectl logs $pod -n mp3-server
          node=$(kubectl get pod $pod -n mp3-server -o jsonpath='{.spec.nodeName}')
          echo "Describing node: $node"
          kubectl describe node $node
        done
        kubectl get events -n mp3-server --sort-by='.lastTimestamp'
        
    - name: Check service status (No Helm)
      run: |
        echo "Checking service status..."
        kubectl get svc -n mp3-server
        SERVICE_NAME=$(kubectl get svc -n mp3-server -o jsonpath='{.items[0].metadata.name}')
        echo "Service name is: $SERVICE_NAME"
        minikube service $SERVICE_NAME -n mp3-server --url
        
    - name: Check HorizontalPodAutoscaler (HPA) status (No Helm)
      run: |
        echo "Checking HPA status..."
        kubectl get hpa -n mp3-server
        
    - name: Check all Kubernetes objects in our namespace (No Helm)
      run: |
        kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n mp3-server    
    
    # I tested a lot. It's faster to delete and recreate the whole cluster than to delete the namespace successfully.
    
    - name: Delete Minikube Cluster 1
      run: |
        minikube delete
        
    - name: Start Minikube Cluster 2
      run: |
        echo "Starting Minikube cluster..."
        minikube start --driver=docker --nodes=3
    
    - name: Check Minikube status (2)
      run: |
        minikube status
    
    - name: Deploy Helm Chart
      run: |
        helm upgrade --install server-release ./server-helm-chart
        
    - name: Check Helm Release Status
      run: |
        helm status server-release
  
    - name: Check pod status and gather debug information for all pods (Helm)
      run: |
        sleep 30  # Wait for the pods to stabilize
        echo "Checking pod statuses..."
        echo "Pod statuses:"
        kubectl get pods -n mp3-server
        for pod in $(kubectl get pods -n mp3-server --no-headers -o custom-columns=":metadata.name"); do
          echo "Describing pod: $pod"
          kubectl describe pod $pod -n mp3-server
          echo "Getting logs for pod: $pod"
          kubectl logs $pod -n mp3-server
          node=$(kubectl get pod $pod -n mp3-server -o jsonpath='{.spec.nodeName}')
          echo "Describing node: $node"
          kubectl describe node $node
        done
        kubectl get events -n mp3-server --sort-by='.lastTimestamp'
        
    - name: Check service status (Helm)
      run: |
        echo "Checking service status..."
        kubectl get svc -n mp3-server
        SERVICE_NAME=$(kubectl get svc -n mp3-server -o jsonpath='{.items[0].metadata.name}')
        echo "Service name is: $SERVICE_NAME"
        minikube service $SERVICE_NAME -n mp3-server --url
        
    - name: Check HorizontalPodAutoscaler (HPA) status (Helm)
      run: |
        echo "Checking HPA status..."
        kubectl get hpa -n mp3-server
        
    - name: Check all Kubernetes objects in our namespace (Helm)
      run: |
        kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n mp3-server


        


