name: Main Workflow

on:
  push:
    paths-ignore:
      - '**/*.md'  # Ignore pushes that only change Markdown files
      - 'k8s-manifest-no-helm.yaml' # Ignore pushes that change an artifact of a workflow.
      - '.github/workflows/manifest-generation.yml'
      

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmpg123-dev libao-dev
    
    - name: Run make command
      run: |
        make
      
    - name: Create SSL data
      run: openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out cert.pem -subj "/C=US/ST=CO/L=Denver/O=RegisUniversity/OU=CS469/CN=regis.edu/emailAddress=hsherwin@regis.edu"
      
    - name: Build Docker image for server
      run: |
        docker build -t server .
        docker images
      
    - name: Run a server container
      run: docker run -d --name test-server -p 8080:8080 server
      
    - name: Check Docker container status
      run: |
        sleep 10  # Wait for the server to stabilize
        STATUS=$(docker inspect --format='{{.State.Status}}' test-server)
        if [ "$STATUS" != "running" ]; then
          echo "Server failed to start, status: $STATUS"
          exit 1
        else
          echo "Server is running, status: $STATUS"
        fi
    
    - name: Stop and remove Docker container
      run: |
        docker stop test-server
        docker rm test-server
        
    - name: Save Docker image as tar
      run: |
        docker save -o server-image.tar server:latest
        
    - name: Install Kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install Helm
      run: |
        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
    - name: Lint Helm Chart
      run: |
        helm lint ./server-helm-chart

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
    - name: Start Minikube
      run: |
        minikube start --driver=docker
        
    - name: Tell Minikube to use the Docker environment
      run: |
        eval $(minikube -p minikube docker-env)
    
    - name: Check Minikube status
      run: |
        minikube status
        
    - name: Load tar on all Minikube nodes
      run: |
        for node in $(kubectl get nodes -o name | cut -d'/' -f 2); do
          echo "Loading image on $node"
          minikube cp server-image.tar $node:/server-image.tar
          minikube ssh -n $node 'docker load -i /server-image.tar'
          minikube ssh -n $node 'docker images'
        done
    
    - name: Install Kubernetes Metrics Server
      run: |
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    
    - name: Deploy Helm Chart
      run: |
        helm upgrade --install server-release ./server-helm-chart
        
    - name: Check Helm Release Status
      run: |
        helm status server-release
  
    - name: Check pod status and gather debug information for all pods (Helm)
      run: |
        sleep 10  # Wait for the pods to stabilize
        echo "Checking pod statuses..."
        echo "Pod statuses:"
        kubectl get pods -n mp3-server
        for pod in $(kubectl get pods -n mp3-server --no-headers -o custom-columns=":metadata.name"); do
          echo "Describing pod: $pod"
          kubectl describe pod $pod -n mp3-server
          echo "Getting logs for pod: $pod"
          kubectl logs $pod -n mp3-server
          node=$(kubectl get pod $pod -n mp3-server -o jsonpath='{.spec.nodeName}')
          echo "Describing node: $node"
          kubectl describe node $node
        done
        kubectl get events -n mp3-server --sort-by='.lastTimestamp'
        
    - name: Check service status  (Helm)
      run: |
        echo "Checking service status..."
        kubectl get svc -n mp3-server
        minikube service mp3-server-service -n mp3-server --url
        
    - name: Check HorizontalPodAutoscaler (HPA) status (Helm)
      run: |
        echo "Checking HPA status..."
        kubectl get hpa mp3-server-hpa -n mp3-server
        
    - name: Check all Kubernetes objects in our namespace (Helm)
      run: |
        kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n mp3-server

    - name: Remove Helm release
      run: |
        helm uninstall server-release
        sleep 60  # Wait for the cluster to stabilize

    - name: Generate raw Kubernetes manifest from Helm chart
      run: |
        helm template server-release ./server-helm-chart > k8s-manifest-no-helm.yaml

    - name: Apply manifest without Helm
      run: |
        kubectl apply -f k8s-manifest-no-helm.yaml
        
    - name: Check pod status and gather debug information for all pods (No Helm)
      run: |
        sleep 10  # Wait for the pods to stabilize
        echo "Checking pod statuses..."
        echo "Pod statuses:"
        kubectl get pods -n mp3-server
        for pod in $(kubectl get pods -n mp3-server --no-headers -o custom-columns=":metadata.name"); do
          echo "Describing pod: $pod"
          kubectl describe pod $pod -n mp3-server
          echo "Getting logs for pod: $pod"
          kubectl logs $pod -n mp3-server
          node=$(kubectl get pod $pod -n mp3-server -o jsonpath='{.spec.nodeName}')
          echo "Describing node: $node"
          kubectl describe node $node
        done
        kubectl get events -n mp3-server --sort-by='.lastTimestamp'
        
    - name: Check service status (No Helm)
      run: |
        echo "Checking service status..."
        kubectl get svc -n mp3-server
        minikube service mp3-server-service -n mp3-server --url
        
    - name: Check HorizontalPodAutoscaler (HPA) status (No Helm)
      run: |
        echo "Checking HPA status..."
        kubectl get hpa mp3-server-hpa -n mp3-server
        
    - name: Check all Kubernetes objects in our namespace (No Helm)
      run: |
        kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n mp3-server

